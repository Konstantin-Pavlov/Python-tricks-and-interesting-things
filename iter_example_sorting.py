'''

https://stepik.org/lesson/372111/step/9?unit=359665

функция iter() может заменить в некоторых случаях цикл while 

Функция iter() может принимать один или два аргумента.

Если в функцию iter(iterable) передан один аргумент — итерируемый объект, то она преобразует его в итератор. 

Если в функцию iter(callable, sentinel) переданы два аргумента, то первый аргумент callable должен являться функцией, 
а второй аргумент sentinel — некоторым стоп-значением. 

В этом случае созданный итератор будет вызывать функцию callable и проверять полученное значение на равенство со значением sentinel. 

Если полученное значение равно sentinel, то возбуждается исключение StopIteration, 
иначе итератор выдает значение, полученное из функции callable.

В приведенном примере написаны две программы. Программа слева реализована с помощью цикла while, 
а программа справа — с помощью функции iter(). 
Обе программы выполняют одно и то же действие — считывают и печатают входные строки до тех пор, пока не будет введено слово "стоп". 

P.S. Обратите внимание, что функция input() при передаче в функцию iter() 
в качестве аргумента callable не вызывается вручную с помощью круглых скобок.


Представьте, у нас есть список товаров и их стоимость, но мы хотим взглянуть на него в отсортированном виде. Вверху хотим видеть самые дорогие товары, внизу самые дешевые

Программа будет принимать строки, в которых сперва указывается название товара, а затем через двоеточие с пробелом его цена - целое положительное число.

Строка «конец» означает завершение списка товаров и соответственно окончание ввода

Все товары имеют уникальные названия, цены не дублируются.

Ваша задача вывести список товаров по уменьшению цены

Sample Input:
Sony PlayStation 5: 46000
Телевизор QLED Samsung QE65Q60TAU: 87090
Смартфон Samsung Galaxy A11: 10000
Планшет Samsung Galaxy Tab S6: 26600
конец
Sample Output:
Телевизор QLED Samsung QE65Q60TAU
Sony PlayStation 5
Планшет Samsung Galaxy Tab S6
Смартфон Samsung Galaxy A11

'''


lines = [line.split(": ") for line in iter(input, "конец")]   
lines.sort(key=lambda x: int(x[1]), reverse=True)
[print(key) for key in dict(lines).keys()]


# [print(j[0]) for j in sorted((i.split(':') for i in iter(input, 'конец')), key=lambda x: -int(x[1]))]